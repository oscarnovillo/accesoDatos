/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package basedatos;

import datos.Compra;
import datos.Persona;
import factoria.TiposSave;
import factoria.SaveFactory;
import factoria.Saveable;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import negocio.Comprobacion;
import util.Constantes;

/**
 *
 * @author profesor
 */
public class FramePersonas extends javax.swing.JFrame {

  /**
   * Creates new form FramePersonas
   */
  Comprobacion c = new Comprobacion();
  Saveable save = null;
  private String rutaBD = null;
  HashMap<Integer, Persona> personas = new HashMap<>();

  public DefaultTableModel crearModeloPersonas() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID");
    model.addColumn("NOMBRE");
    return model;
  }

  public FramePersonas() {
    initComponents();
    leerProperties();
    this.setLocationRelativeTo(null);
    jTable1.setModel(crearModeloPersonas());
  }

  private void leerProperties() {
    FileReader file = null;
    Properties p = null;
    try {
      p = new Properties();
      file = new FileReader(Constantes.FICHERO_PROPERTIES);
      p.load(file);
      rutaBD = p.getProperty(Constantes.RUTABD_PROPERTY);
    } catch (FileNotFoundException e) {
      System.out.println("FileNotFound");
    } catch (IOException e) {
      System.out.println("IOEXCeption");
    } finally {
      if (file != null) {
        try {
          file.close();
        } catch (Exception e) {
          e.printStackTrace();
        }
      } else {
      }
    }
  }

  private void cargarFactoria() {
    SaveFactory fac = new SaveFactory();
    if (jComboBoxTipoFactoria.getSelectedItem().equals("JaxB")) {
      save = fac.build(TiposSave.JAXB);
    } else {
      save = fac.build(TiposSave.XSTREAM);
    }
  }

  private void vaciarPersonas() {
    File f = new File(Constantes.NOMBREFICHERO_PROPERTY);
    HashMap<Integer, Persona> hash = deTablaAHashMap();
    Iterator it = hash.values().iterator();
    Persona p = null;
    File fc = null;
    while (it.hasNext()) {
      p = (Persona) it.next();
      fc = new File(p.getId() + ".xml");
      fc.delete();
    }
    FileWriter fw = null;
    try {
      fw = new FileWriter(f);
      fw.write("");
    } catch (IOException ex) {
      Logger.getLogger(FramePersonas.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jDialog1 = new javax.swing.JDialog();
    jScrollPane2 = new javax.swing.JScrollPane();
    jTable2 = new javax.swing.JTable();
    BotonCrearC = new javax.swing.JButton();
    BotonGuardarC = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    BotonBorrarC = new javax.swing.JButton();
    BotonCancelarC = new javax.swing.JButton();
    TextCantidad = new javax.swing.JTextField();
    TextConcepto = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTable1 = new javax.swing.JTable();
    jTextId = new javax.swing.JTextField();
    jTextNombre = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jButtonCrear = new javax.swing.JButton();
    jButtonComprar = new javax.swing.JButton();
    jButtonBorrar = new javax.swing.JButton();
    jButtonCargar = new javax.swing.JButton();
    jButtonGuardar = new javax.swing.JButton();
    jComboBoxTipoFactoria = new javax.swing.JComboBox();

    jDialog1.setMinimumSize(new java.awt.Dimension(400, 400));
    jDialog1.setModal(true);
    jDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        jDialog1WindowClosing(evt);
      }
    });

    jTable2.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane2.setViewportView(jTable2);

    BotonCrearC.setText("Crear");
    BotonCrearC.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCrearComprasActionPerformed(evt);
      }
    });

    BotonGuardarC.setText("Guardar");
    BotonGuardarC.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonGuardarComprasActionPerformed(evt);
      }
    });

    jLabel3.setText("Cliente");

    BotonBorrarC.setText("Borrar");
    BotonBorrarC.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonBorrarComprasActionPerformed(evt);
      }
    });

    BotonCancelarC.setText("Cancelar");
    BotonCancelarC.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCancelarComprasActionPerformed(evt);
      }
    });

    jLabel4.setText("Cantidad: ");

    jLabel5.setText("Concepto:");

    javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
    jDialog1.getContentPane().setLayout(jDialog1Layout);
    jDialog1Layout.setHorizontalGroup(
      jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jDialog1Layout.createSequentialGroup()
            .addComponent(jLabel4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(TextCantidad)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(TextConcepto, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
            .addComponent(BotonBorrarC, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(BotonCrearC, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(BotonCancelarC, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(BotonGuardarC, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
          .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
      .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );
    jDialog1Layout.setVerticalGroup(
      jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jDialog1Layout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(TextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(TextConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(BotonBorrarC)
            .addComponent(BotonCrearC)
            .addComponent(BotonGuardarC))
          .addComponent(BotonCancelarC))
        .addContainerGap())
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jTable1.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {},
        {},
        {},
        {}
      },
      new String [] {

      }
    ));
    jScrollPane1.setViewportView(jTable1);

    jLabel1.setText("Id");

    jLabel2.setText("Nombre");

    jButtonCrear.setText("Crear");
    jButtonCrear.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCrearActionPerformed(evt);
      }
    });

    jButtonComprar.setLabel("Compras");
    jButtonComprar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonComprasActionPerformed(evt);
      }
    });

    jButtonBorrar.setText("Borrar");
    jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonBorrarActionPerformed(evt);
      }
    });

    jButtonCargar.setText("Cargar");
    jButtonCargar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCargarActionPerformed(evt);
      }
    });

    jButtonGuardar.setText("Guardar");
    jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonGuardarActionPerformed(evt);
      }
    });

    jComboBoxTipoFactoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JaxB", "Xstream" }));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextId, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTextNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButtonCrear, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonComprar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonCargar, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
            .addGap(6, 6, 6)))
        .addContainerGap())
      .addComponent(jComboBoxTipoFactoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        .addGap(1, 1, 1)
        .addComponent(jComboBoxTipoFactoria)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jTextId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(jTextNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButtonCrear)
          .addComponent(jButtonComprar)
          .addComponent(jButtonBorrar)
          .addComponent(jButtonGuardar)
          .addComponent(jButtonCargar))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
    private void jButtonCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearActionPerformed
      if (jTextId.getText().equals("") || jTextNombre.getText().equals("")) {
        JOptionPane.showMessageDialog(this, "No has introducido datos para crear la persona");
      } else {
        HashMap<Integer, Persona> hash = deTablaAHashMap();
        try {
          int enteroTextId = Integer.parseInt(jTextId.getText());
          if (c.comprobarExistePersona(hash, enteroTextId) == false) {
            crearYAnadirPersona(hash, new Persona(Integer.parseInt(jTextId.getText()), jTextNombre.getText()));
            save.personasToXML(hash, Constantes.NOMBREFICHERO_PROPERTY);
            JOptionPane.showMessageDialog(this, "Creado");
          } else {
            JOptionPane.showMessageDialog(this, "Ese ID ya existe");
          }
        } catch (NumberFormatException e) {
          JOptionPane.showMessageDialog(this, "ID no valido");
        }
      }
    }//GEN-LAST:event_jButtonCrearActionPerformed
  private HashMap<Integer, Persona> deTablaAHashMap() {
   
    Persona p = null;
    for (int i = 0; i < jTable1.getRowCount(); i++) {
      try {
        p = new Persona(
                Integer.parseInt(jTable1.getModel().getValueAt(i, Constantes.COLUMN_PERSONA_ID).toString()),
                (String) jTable1.getModel().getValueAt(i, Constantes.COLUMN_PERSONA_NOMBRE));
        personas.put(p.getId(), p);
      } catch (NumberFormatException numberFormatException) {
        JOptionPane.showMessageDialog(this, "IDs no validos eliminados");
      }
    }
    return personas;
  }

  private ArrayList<Compra> deTablaAArray() {
    ArrayList<Compra> compras = new ArrayList<>();
    Compra c = null;
    for (int i = 0; i < jTable2.getRowCount(); i++) {
      try {
        c = new Compra(
                Integer.parseInt(jTable2.getModel().getValueAt(i, Constantes.COLUMN_COMPRA_CANTIDAD).toString()),
                (String) jTable2.getModel().getValueAt(i, Constantes.COLUMN_COMPRA_CONCEPTO));

        compras.add(c);
      } catch (NumberFormatException numberFormatException) {
        JOptionPane.showMessageDialog(this, "Cantidades no validas eliminadas");
      }
    }
    return compras;
  }

  private void deHashMapATabla(HashMap<Integer, Persona> personas) {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID");
    model.addColumn("NOMBRE");
    jTable1.setModel(model);
    for (int i = 0; i < jTable1.getModel().getRowCount(); i++) {
      ((DefaultTableModel) jTable1.getModel()).removeRow(i);
    }
    Iterator it = personas.values().iterator();
    while (it.hasNext()) {
      Persona p = (Persona) it.next();
      model.addRow(new Object[]{p.getId(), p.getNombre()});
    }
  }

  private void deArrayATabla(ArrayList<Compra> compras) {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("CANTIDAD");
    model.addColumn("CONCEPTO");
    jTable2.setModel(model);
    for (Compra compra : compras) {
      model.addRow(new Object[]{compra.getCantidad(), compra.getConcepto()});
    }
  }
    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
      if (comprobarID() == true) {
        personas = deTablaAHashMap();
        save.personasToXML(personas, Constantes.NOMBREFICHERO_PROPERTY);
        JOptionPane.showMessageDialog(this, "Guardado");
      } else {
        JOptionPane.showMessageDialog(this, "No se puede guardar hasta que no haya IDs sin repetir");
      }


    }//GEN-LAST:event_jButtonGuardarActionPerformed
    private void jButtonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarActionPerformed
      cargarFactoria();
      try {
        deHashMapATabla(save.personasFromXML(Constantes.NOMBREFICHERO_PROPERTY));
      } catch (Exception e) {
      }

    }//GEN-LAST:event_jButtonCargarActionPerformed
    private void jButtonComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComprasActionPerformed
      try {
        jDialog1.setTitle(PersonaSeleccionado().getNombre());
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("CANTIDAD");
        model.addColumn("CONCEPTO");
        jTable2.setModel(model);
        HashMap<Integer, Persona> personas = deTablaAHashMap();
        int fila = jTable1.getSelectedRow();
        if (fila >= 0) {
          jLabel3.setText("Compras de: " + PersonaSeleccionado().getNombre());
          File f = new File(PersonaSeleccionado().getId() + ".xml");
          if (f.exists()) {
            ArrayList<Compra> compras = save.comprasFromXML(PersonaSeleccionado().getId() + ".xml");
            deArrayATabla(compras);
          }
          jDialog1.setLocationRelativeTo(null);
          jDialog1.setVisible(true);
        }
      } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Selecciona una persona");
      }
    }//GEN-LAST:event_jButtonComprasActionPerformed
    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
      DefaultTableModel model = ((DefaultTableModel) jTable1.getModel());
      try {
        File c = new File(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), Constantes.COLUMN_PERSONA_ID).toString() + ".dat");
        c.delete();
        model.removeRow(jTable1.getSelectedRow());
        HashMap<Integer, Persona> personas = deTablaAHashMap();
        save.personasToXML(personas, Constantes.NOMBREFICHERO_PROPERTY);
        JOptionPane.showMessageDialog(this, "Borrado");
      } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Selecciona una persona");
      }
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonCancelarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarComprasActionPerformed
      jDialog1.setVisible(false);
    }//GEN-LAST:event_jButtonCancelarComprasActionPerformed

    private void jButtonBorrarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarComprasActionPerformed
      DefaultTableModel model = ((DefaultTableModel) jTable2.getModel());
      try {
        model.removeRow(jTable2.getSelectedRow());
        ArrayList<Compra> compras = deTablaAArray();
        save.comprasToXML(compras, PersonaSeleccionado().getId() + ".xml");
        JOptionPane.showMessageDialog(jDialog1, "Borrado");
      } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Selecciona una compra");
      }
    }//GEN-LAST:event_jButtonBorrarComprasActionPerformed

    private void jButtonGuardarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarComprasActionPerformed
      ArrayList<Compra> compras = deTablaAArray();
      save.comprasToXML(compras, PersonaSeleccionado().getId() + ".xml");
      JOptionPane.showMessageDialog(jDialog1, "Guardado");
      //LLamamos otra vez al boton para recargar la tabla
      jButtonComprasActionPerformed(null);
    }//GEN-LAST:event_jButtonGuardarComprasActionPerformed

    private void jButtonCrearComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearComprasActionPerformed
      if (TextCantidad.getText().equals("") || TextConcepto.getText().equals("")) {
        JOptionPane.showMessageDialog(jDialog1, "No has introducido datos para crear la compra");
      } else {

        try {
          int enteroTextCantidad = Integer.parseInt(TextCantidad.getText());
          ArrayList<Compra> compras = deTablaAArray();
          crearYAnadirCompra(compras, new Compra(Integer.parseInt(TextCantidad.getText()), TextConcepto.getText()));
          save.comprasToXML(compras, PersonaSeleccionado().getId() + ".xml");
          JOptionPane.showMessageDialog(jDialog1, "Creado");
        } catch (NumberFormatException numberFormatException) {
          JOptionPane.showMessageDialog(jDialog1, "Cantidad no valida");
        }

      }
    }//GEN-LAST:event_jButtonCrearComprasActionPerformed

    private void jDialog1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowClosing
      int seleccion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que quieres cerrar sin darle a guardar?");
      if (seleccion == JOptionPane.YES_OPTION) {
        jDialog1.setVisible(false);
      } else {
        jDialog1.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
      }

    }//GEN-LAST:event_jDialog1WindowClosing
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      vaciarPersonas();
    }//GEN-LAST:event_formWindowClosing
  
    
  private void crearYAnadirPersona(HashMap<Integer, Persona> hashp, Persona p) {
    hashp.put(p.getId(), p);
    DefaultTableModel model = ((DefaultTableModel) jTable1.getModel());
    model.addRow(new Object[]{p.getId(), p.getNombre()});
  }

  private void crearYAnadirCompra(ArrayList<Compra> compras, Compra c) {
    compras.add(c);
    DefaultTableModel model = ((DefaultTableModel) jTable2.getModel());
    model.addRow(new Object[]{c.getCantidad(), c.getConcepto()});
  }

  public Persona PersonaSeleccionado() {
    HashMap<Integer, Persona> personas = deTablaAHashMap();
    int fila = jTable1.getSelectedRow();
    Persona p = null;
    if (fila >= 0) {
      int id = Integer.parseInt(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), Constantes.COLUMN_PERSONA_ID).toString());
      p = personas.get(id);
    }
    return p;
  }

  
  // no es necesario.
  public boolean comprobarID() {
    int contador = 0;
    boolean solucion = true;
    if (jTable1.getSelectedRow() != -1) {
      for (int i = 0; i < jTable1.getRowCount(); i++) {
        String existe = jTable1.getModel().getValueAt(i, Constantes.COLUMN_PERSONA_ID).toString();
        String actual = (String) jTable1.getValueAt(jTable1.getSelectedRow(), Constantes.COLUMN_PERSONA_ID);
        if (existe.equals(actual)) {
          contador++;
        }
      }
      if (contador > 1) {
        solucion = false;
      }
    }
    return solucion;
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(FramePersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(FramePersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(FramePersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(FramePersonas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new FramePersonas().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton BotonBorrarC;
  private javax.swing.JButton BotonCancelarC;
  private javax.swing.JButton BotonCrearC;
  private javax.swing.JButton BotonGuardarC;
  private javax.swing.JTextField TextCantidad;
  private javax.swing.JTextField TextConcepto;
  private javax.swing.JButton jButtonBorrar;
  private javax.swing.JButton jButtonCargar;
  private javax.swing.JButton jButtonComprar;
  private javax.swing.JButton jButtonCrear;
  private javax.swing.JButton jButtonGuardar;
  private javax.swing.JComboBox jComboBoxTipoFactoria;
  private javax.swing.JDialog jDialog1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTable jTable1;
  private javax.swing.JTable jTable2;
  private javax.swing.JTextField jTextId;
  private javax.swing.JTextField jTextNombre;
  // End of variables declaration//GEN-END:variables
}
