/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package concesionario;

import concesionario.datos.Coche;
import negocio.GestorFicheros;
import concesionario.datos.Franquicia;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import negocio.GestorJDOM;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.filter.Filters;
import org.jdom2.input.SAXBuilder;
import org.jdom2.xpath.XPathExpression;
import org.jdom2.xpath.XPathFactory;

/**
 *
 * @author profesor
 */
public class FrameConcesionario extends javax.swing.JFrame {

  Document concesionario = null;
  String idFranquiciaSeleccionada = null;
  ArrayList<Franquicia> franquicias = null;

  public DefaultTableModel crearModeloStock() {
    DefaultTableModel model = new DefaultTableModel() {

      @Override
      public boolean isCellEditable(int row, int column) {
        return column != 1;
      }

    };
    model.addColumn("MATRICULA");
    model.addColumn("MARCA");
    model.addColumn("MODELO");
    return model;
  }

  private void cargarComboFranquicias() {
    File f = new File("./formatos.xml");
    franquicias = new ArrayList<>();
    jComboBoxFranquicias.removeAllItems();
    SAXBuilder saxBuilder = new SAXBuilder();

    if (f.exists()) {

      Document document = null;
      try {
        document = saxBuilder.build(f);
        Element rootNode = document.getRootElement();
        List<Element> frList = rootNode.getChildren("franquicia");
        for (Element franquiciaElement : frList) {
          Franquicia franquicia = new Franquicia(Integer.parseInt(franquiciaElement.getAttributeValue("id")),
                  franquiciaElement.getAttributeValue("formato"));
          franquicias.add(franquicia);
          jComboBoxFranquicias.addItem(franquicia);
        }
      } catch (JDOMException ex) {
        //Logger.getLogger(FicherosDatos.class.getName()).log(Level.SEVERE, null, ex);
      } catch (IOException ex) {
        //Logger.getLogger(FicherosDatos.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
  }



  public void vaciarTabla(JTable tabla) {
    int filas = tabla.getRowCount();
    for (int i = 0; i < filas; i++) {
      ((DefaultTableModel) tabla.getModel()).removeRow(i);
    }
  }

  /**
   * Creates new form FrameConcesionario
   */
  public FrameConcesionario() {
    initComponents();
    jTableStockFranquicia.setModel(crearModeloStock());
    cargarComboFranquicias();
    GestorJDOM gd = new GestorJDOM();
    concesionario = gd.crearFormatoJDOMVacio();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jComboBoxFranquicias = new javax.swing.JComboBox();
    jButtonCargarFranquicia = new javax.swing.JButton();
    jButtonGuardarFranquicia = new javax.swing.JButton();
    jButtonCargarStock = new javax.swing.JButton();
    jButtonBorrarStock = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTableStockFranquicia = new javax.swing.JTable();
    jButtonGuardarJDOM = new javax.swing.JButton();
    jButtonCargarJDOM = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jComboBoxFranquicias.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

    jButtonCargarFranquicia.setText("Cargar Franquicia");
    jButtonCargarFranquicia.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCargarFranquiciaActionPerformed(evt);
      }
    });

    jButtonGuardarFranquicia.setText("GuardarFranquicia");
    jButtonGuardarFranquicia.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonGuardarFranquiciaActionPerformed(evt);
      }
    });

    jButtonCargarStock.setText("cargar stock");
    jButtonCargarStock.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCargarStockActionPerformed(evt);
      }
    });

    jButtonBorrarStock.setText("borrar stock");
    jButtonBorrarStock.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonBorrarStockActionPerformed(evt);
      }
    });

    jTableStockFranquicia.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jScrollPane1.setViewportView(jTableStockFranquicia);

    jButtonGuardarJDOM.setText("Guardar JDOM");
    jButtonGuardarJDOM.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonGuardarJDOMActionPerformed(evt);
      }
    });

    jButtonCargarJDOM.setText("CargarJDOM");
    jButtonCargarJDOM.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCargarJDOMActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jComboBoxFranquicias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addGroup(layout.createSequentialGroup()
        .addGap(131, 131, 131)
        .addComponent(jButtonCargarStock)
        .addGap(18, 18, 18)
        .addComponent(jButtonBorrarStock)
        .addGap(0, 138, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jButtonCargarFranquicia)
          .addComponent(jButtonGuardarFranquicia))
        .addGap(57, 57, 57)
        .addComponent(jButtonGuardarJDOM)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonCargarJDOM)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jComboBoxFranquicias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButtonCargarStock)
          .addComponent(jButtonBorrarStock))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButtonCargarFranquicia)
            .addGap(18, 18, 18)
            .addComponent(jButtonGuardarFranquicia))
          .addGroup(layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jButtonGuardarJDOM)
              .addComponent(jButtonCargarJDOM))))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jButtonCargarFranquiciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarFranquiciaActionPerformed

      // ver el formato de la franquicia
      Franquicia seleccion = (Franquicia) jComboBoxFranquicias.getSelectedItem();
      Franquicia cargada = null;
      if (seleccion != null) {
        // cargar con ese formato 
        String formato = seleccion.getFormato();
        GestorFicheros gf = new GestorFicheros();
        switch (formato) {
          case "json":
            cargada = gf.cargarFranquiciaJson("" + seleccion.getId());
            break;
          case "jaxb":
            cargada = gf.cargarFranquiciaJaxb("" + seleccion.getId());
            break;
          case "objetos":
            cargada = gf.cargarFranquiciaObjetos("" + seleccion.getId());
            break;
        }
        //meter en JDOM
        meterFranquiciaJDOM(cargada);
      } else {
        JOptionPane.showMessageDialog(this, "selecciona una franquicia");
      }
    }//GEN-LAST:event_jButtonCargarFranquiciaActionPerformed

  private void jButtonCargarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarStockActionPerformed
    Franquicia seleccionada = (Franquicia) jComboBoxFranquicias.getSelectedItem();
     vaciarTabla(jTableStockFranquicia);
    if (seleccionada != null) {
      idFranquiciaSeleccionada = seleccionada.id+"";
      Element franquicia = encuentraFranquicia(seleccionada);
      if (franquicia != null) {
        DefaultTableModel model = ((DefaultTableModel) jTableStockFranquicia.getModel());
       
        Element stock = franquicia.getChild("stock");
        for (Element coche : stock.getChildren()) {
          model.addRow(new Object[]{coche.getAttributeValue("matricula"), coche.getChildText("marca"), coche.getChildText("modelo")});
        }
      } else {
        JOptionPane.showMessageDialog(this, "franquicia sin datos en JDOM");
      }
    } else {
      JOptionPane.showMessageDialog(this, "selecciona una franquicia");
    }
  }//GEN-LAST:event_jButtonCargarStockActionPerformed

  private void jButtonBorrarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarStockActionPerformed
    String matriculaaBorrar = null;
     DefaultTableModel model = ((DefaultTableModel) jTableStockFranquicia.getModel());
    if (jTableStockFranquicia.getSelectedRow() >= 0)
    {
      matriculaaBorrar  = jTableStockFranquicia.getValueAt(jTableStockFranquicia.getSelectedRow(), 0).toString();
      model.removeRow(jTableStockFranquicia.getSelectedRow());
      Element coche = encuentraCoche(matriculaaBorrar, idFranquiciaSeleccionada);
      if (coche != null)
      {
        coche.detach();
      }
    }else {
      JOptionPane.showMessageDialog(this, "selecciona una fila a borrar");
    }
    
    
  }//GEN-LAST:event_jButtonBorrarStockActionPerformed

  private void jButtonGuardarJDOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarJDOMActionPerformed
    GestorFicheros gf = new GestorFicheros();
    gf.guardarJDOM(concesionario,"JDOM.xml");
  }//GEN-LAST:event_jButtonGuardarJDOMActionPerformed

  private void jButtonCargarJDOMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarJDOMActionPerformed
    // TODO add your handling code here:
    GestorFicheros gf = new GestorFicheros();
    concesionario = gf.cargarJDOM("JDOM.xml");
  }//GEN-LAST:event_jButtonCargarJDOMActionPerformed

  private void jButtonGuardarFranquiciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarFranquiciaActionPerformed
    // ver el formato de la franquicia
      Franquicia seleccion = (Franquicia) jComboBoxFranquicias.getSelectedItem();
      Franquicia cargada = null;
      if (seleccion != null) {
        // cargar con ese formato 
        GestorFicheros gf = new GestorFicheros();
        cargada = cargarFranquiciaJDOM(seleccion);
        gf.guardarFranquicia(cargada);
        //meter en JDOM
      } else {
        JOptionPane.showMessageDialog(this, "selecciona una franquicia");
      }
  }//GEN-LAST:event_jButtonGuardarFranquiciaActionPerformed

  private Element encuentraCoche(String matriculaCoche, String idFranquicia) {
    Element cocheElement = null;
    XPathFactory xFactory = XPathFactory.instance();
    XPathExpression<Element> expr = xFactory.compile("//franquicia[@id='" + idFranquicia
            + "']/stock/coche[@matricula='" + matriculaCoche + "']", Filters.element());
    cocheElement = expr.evaluateFirst(concesionario);
    return cocheElement;
  }

  private Element encuentraFranquicia(Franquicia f) {
    Element franquiciaElement = null;
    XPathFactory xFactory = XPathFactory.instance();
        // System.out.println(xFactory.getClass());

    // select all links
    XPathExpression<Element> expr = xFactory.compile("//franquicia[@id='" + f.getId() + "']", Filters.element());

    franquiciaElement = expr.evaluateFirst(concesionario);
    return franquiciaElement;
  }

  private void comprobacionesNuevaFranquicia(Franquicia nuevaFranquicia)
  {
    Element franquiciaElement = encuentraFranquicia(nuevaFranquicia);
    //recorrer las matriculas y no añadir las que estuvieran
    if (franquiciaElement!= null)
    {
    
    }
    //comprobar que las vendidad estan en stock
    

    
    //comprobar que los alquileres existen.
    
    
  }
  
  private void meterFranquiciaJDOM(Franquicia f) {
    // encontrar la franquicia
    Element franquiciaElement = encuentraFranquicia(f);
    comprobacionesNuevaFranquicia(f);
    GestorJDOM gestor = new GestorJDOM();
    if (franquiciaElement == null) {
      franquiciaElement = gestor.crearElementFranquicia(f);
    }
    
    concesionario.getRootElement().getChild("franquicias").addContent(franquiciaElement);
  }
private Franquicia cargarFranquiciaJDOM(Franquicia f){
    // encontrar la franquicia
    Franquicia cargada = null;
    Element franquiciaElement = encuentraFranquicia(f);
    GestorJDOM gestor = new GestorJDOM();
    if (franquiciaElement != null) {
      cargada = gestor.crearFranquiciaDeElement(franquiciaElement);
    }
    
    return cargada;
  }
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(FrameConcesionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(FrameConcesionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(FrameConcesionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(FrameConcesionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new FrameConcesionario().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButtonBorrarStock;
  private javax.swing.JButton jButtonCargarFranquicia;
  private javax.swing.JButton jButtonCargarJDOM;
  private javax.swing.JButton jButtonCargarStock;
  private javax.swing.JButton jButtonGuardarFranquicia;
  private javax.swing.JButton jButtonGuardarJDOM;
  private javax.swing.JComboBox jComboBoxFranquicias;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTable jTableStockFranquicia;
  // End of variables declaration//GEN-END:variables
}
